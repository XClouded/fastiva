/*
 * Copyright (C) 2006 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * JNI specification, as defined by Sun:
 * http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/jniTOC.html
 *
 * Everything here is expected to be VM-neutral.
 */

#ifndef __FASTIVA_JNI_H_
#define __FASTIVA_JNI_H_

#ifndef FASTIVA_JNI_ENV
#error "FASTIVA_JNI_ENV not defined"
#endif
#ifndef __cplusplus
#error "fni must be used in C++"
#endif

#include <stdarg.h>
#include <string.h>
#include <setjmp.h>
/*
 * Primitive types that match up with Java equivalents.
 */
#ifdef HAVE_INTTYPES_H
# include <inttypes.h>      /* C99 */
typedef uint8_t         jboolean;       /* unsigned 8 bits */
typedef int8_t          jbyte;          /* signed 8 bits */
typedef uint16_t        jchar;          /* unsigned 16 bits */
typedef int16_t         jshort;         /* signed 16 bits */
typedef int32_t         jint;           /* signed 32 bits */
typedef int64_t         jlong;          /* signed 64 bits */
typedef float           jfloat;         /* 32-bit IEEE 754 */
typedef double          jdouble;        /* 64-bit IEEE 754 */
#else
typedef unsigned char   jboolean;       /* unsigned 8 bits */
typedef signed char     jbyte;          /* signed 8 bits */
typedef unsigned short  jchar;          /* unsigned 16 bits */
typedef short           jshort;         /* signed 16 bits */
typedef int             jint;           /* signed 32 bits */
typedef long long       jlong;          /* signed 64 bits */
typedef float           jfloat;         /* 32-bit IEEE 754 */
typedef double          jdouble;        /* 64-bit IEEE 754 */
#endif

/* "cardinal indices and sizes" */
typedef jint            jsize;

/*
 * Reference types, in C++
 */
class _jobject {
public:
	void** vtable;
	void* clazz;
	int fastiva_padding[2];
};
class _jarray : public _jobject {
public:
	unsigned int length;
	int fastiva_padding[1];
	int items[1];
};
class _jstring : public _jobject {
public:
	_jarray* value;
	int count;
	int padding;
	int offset;
};

class _jclass : public _jobject {
public:
	int padding;
	void** vtable;
};

class _jobjectArray : public _jarray {};
class _jbooleanArray : public _jarray {};
class _jbyteArray : public _jarray {};
class _jcharArray : public _jarray {};
class _jshortArray : public _jarray {};
class _jintArray : public _jarray {};
class _jlongArray : public _jarray {};
class _jfloatArray : public _jarray {};
class _jdoubleArray : public _jarray {};
class _jthrowable : public _jobject {};
class _jweak {};

typedef _jobject*       jobject;
typedef _jclass*        jclass;
typedef _jstring*       jstring;
typedef _jarray*        jarray;
typedef _jobjectArray*  jobjectArray;
typedef _jbooleanArray* jbooleanArray;
typedef _jbyteArray*    jbyteArray;
typedef _jcharArray*    jcharArray;
typedef _jshortArray*   jshortArray;
typedef _jintArray*     jintArray;
typedef _jlongArray*    jlongArray;
typedef _jfloatArray*   jfloatArray;
typedef _jdoubleArray*  jdoubleArray;
typedef _jthrowable*    jthrowable;
typedef _jweak*       jweak;


struct _jfieldID {
	jclass clazz;
	jint  accessFlags;
	jint  padding[2];
	jint  byteOffset;
};


struct _jmethodID {
	jclass clazz;
	jint  accessFlags;
    jchar methodIndex;
	jchar padding1;
	char  apdding2[48-12];
	void* fastivaMethod;
};

typedef struct _jfieldID* jfieldID;     /* field IDs */
typedef struct _jmethodID* jmethodID;   /* method IDs */

static const int FASTIVA_ACC_CPP_DIRECT = 0x08000000;
static const int FASTIVA_ACC_VOLATILE   = 0x00000040;
#define FASTIVA_IS_VOLATILE_FIELD(field)	((field->accessFlags & FASTIVA_ACC_VOLATILE) != 0)
#define FASTIVA_OBJECT_FIELD(obj, field)	(void*)((int)obj + field->byteOffset)
#define FASTIVA_STATIC_FIELD(field)			(void*)(&field->byteOffset)
#define FASTIVA_IS_CPP_METHOD(method)		((method->accessFlags & FASTIVA_ACC_CPP_DIRECT) != 0) 

struct JNIInvokeInterface;

typedef union jvalue {
    jboolean    z;
    jbyte       b;
    jchar       c;
    jshort      s;
    jint        i;
    jlong       j;
    jfloat      f;
    jdouble     d;
    jobject     l;
} jvalue;

typedef enum jobjectRefType {
    JNIInvalidRefType = 0,
    JNILocalRefType = 1,
    JNIGlobalRefType = 2,
    JNIWeakGlobalRefType = 3
} jobjectRefType;

typedef struct {
    const char* name;
    const char* signature;
    void*       fnPtr;
} JNINativeMethod;

struct _JNIEnv;
struct _JNIEnv0;
struct _JavaVM;
typedef const struct JNINativeInterface* C_JNIEnv;

typedef _JNIEnv JNIEnv;
typedef _JavaVM JavaVM;

union FNI_METHOD {
	jobject	 (*mObject)(...);
	jboolean (*mBoolen)(...);
	jbyte	 (*mByte)(...);
	jchar	 (*mChar)(...);
	jshort	 (*mShort)(...); 
	jint	 (*mInt)(...); 
	jlong	 (*mLong)(...);
	jfloat	 (*mFloat)(...); 
	jdouble	 (*mDouble)(...);
	void     (*mVoid)(...);
};


/*
 * Table of interface function pointers.
 */
struct JNINativeInterface {
    void*       reserved0;
    void*       reserved1;
    void*       reserved2;
    void*       reserved3;


    jint        (*_GetVersion)(_JNIEnv0 *);

    jclass      (*_DefineClass)(_JNIEnv0*, const char*, jobject, const jbyte*,
                        jsize);
    jclass      (*_FindClass)(_JNIEnv0*, const char*);

    jmethodID   (*_FromReflectedMethod)(_JNIEnv0*, jobject);
    jfieldID    (*_FromReflectedField)(_JNIEnv0*, jobject);
    /* spec doesn't show jboolean parameter */
    jobject     (*_ToReflectedMethod)(_JNIEnv0*, jclass, jmethodID, jboolean);

    jclass      (*_GetSuperclass)(_JNIEnv0*, jclass);
    jboolean    (*_IsAssignableFrom)(_JNIEnv0*, jclass, jclass);

    /* spec doesn't show jboolean parameter */
    jobject     (*_ToReflectedField)(_JNIEnv0*, jclass, jfieldID, jboolean);

    jint        (*_Throw)(_JNIEnv0*, jthrowable);
    jint        (*_ThrowNew)(_JNIEnv0 *, jclass, const char *);
    jthrowable  (*_ExceptionOccurred)(_JNIEnv0*);
    void        (*_ExceptionDescribe)(_JNIEnv0*);
    void        (*_ExceptionClear)(_JNIEnv0*);
    void        (*_FatalError)(_JNIEnv0*, const char*);

    jint        (*_PushLocalFrame)(_JNIEnv0*, jint);
    jobject     (*_PopLocalFrame)(_JNIEnv0*, jobject);

    jobject     (*_NewGlobalRef)(_JNIEnv0*, jobject);
    void        (*_DeleteGlobalRef)(_JNIEnv0*, jobject);
    void        (*_DeleteLocalRef)(_JNIEnv0*, jobject);
    jboolean    (*_IsSameObject)(_JNIEnv0*, jobject, jobject);

    jobject     (*_NewLocalRef)(_JNIEnv0*, jobject);
    jint        (*_EnsureLocalCapacity)(_JNIEnv0*, jint);

    jobject     (*_AllocObject)(_JNIEnv0*, jclass);
    jobject     (*_NewObject)(_JNIEnv0*, jclass, jmethodID, ...);
    jobject     (*_NewObjectV)(_JNIEnv0*, jclass, jmethodID, va_list);
    jobject     (*_NewObjectA)(_JNIEnv0*, jclass, jmethodID, jvalue*);

    jclass      (*_GetObjectClass)(_JNIEnv0*, jobject);
    jboolean    (*_IsInstanceOf)(_JNIEnv0*, jobject, jclass);
    jmethodID   (*_GetMethodID)(_JNIEnv0*, jclass, const char*, const char*);

    jobject     (*_CallObjectMethod)(_JNIEnv0*, jobject, jmethodID, ...);
    jobject     (*_CallObjectMethodV)(_JNIEnv0*, jobject, jmethodID, va_list);
    jobject     (*_CallObjectMethodA)(_JNIEnv0*, jobject, jmethodID, jvalue*);
    jboolean    (*_CallBooleanMethod)(_JNIEnv0*, jobject, jmethodID, ...);
    jboolean    (*_CallBooleanMethodV)(_JNIEnv0*, jobject, jmethodID, va_list);
    jboolean    (*_CallBooleanMethodA)(_JNIEnv0*, jobject, jmethodID, jvalue*);
    jbyte       (*_CallByteMethod)(_JNIEnv0*, jobject, jmethodID, ...);
    jbyte       (*_CallByteMethodV)(_JNIEnv0*, jobject, jmethodID, va_list);
    jbyte       (*_CallByteMethodA)(_JNIEnv0*, jobject, jmethodID, jvalue*);
    jchar       (*_CallCharMethod)(_JNIEnv0*, jobject, jmethodID, ...);
    jchar       (*_CallCharMethodV)(_JNIEnv0*, jobject, jmethodID, va_list);
    jchar       (*_CallCharMethodA)(_JNIEnv0*, jobject, jmethodID, jvalue*);
    jshort      (*_CallShortMethod)(_JNIEnv0*, jobject, jmethodID, ...);
    jshort      (*_CallShortMethodV)(_JNIEnv0*, jobject, jmethodID, va_list);
    jshort      (*_CallShortMethodA)(_JNIEnv0*, jobject, jmethodID, jvalue*);
    jint        (*_CallIntMethod)(_JNIEnv0*, jobject, jmethodID, ...);
    jint        (*_CallIntMethodV)(_JNIEnv0*, jobject, jmethodID, va_list);
    jint        (*_CallIntMethodA)(_JNIEnv0*, jobject, jmethodID, jvalue*);
    jlong       (*_CallLongMethod)(_JNIEnv0*, jobject, jmethodID, ...);
    jlong       (*_CallLongMethodV)(_JNIEnv0*, jobject, jmethodID, va_list);
    jlong       (*_CallLongMethodA)(_JNIEnv0*, jobject, jmethodID, jvalue*);
    jfloat      (*_CallFloatMethod)(_JNIEnv0*, jobject, jmethodID, ...);
    jfloat      (*_CallFloatMethodV)(_JNIEnv0*, jobject, jmethodID, va_list);
    jfloat      (*_CallFloatMethodA)(_JNIEnv0*, jobject, jmethodID, jvalue*);
    jdouble     (*_CallDoubleMethod)(_JNIEnv0*, jobject, jmethodID, ...);
    jdouble     (*_CallDoubleMethodV)(_JNIEnv0*, jobject, jmethodID, va_list);
    jdouble     (*_CallDoubleMethodA)(_JNIEnv0*, jobject, jmethodID, jvalue*);
    void        (*_CallVoidMethod)(_JNIEnv0*, jobject, jmethodID, ...);
    void        (*_CallVoidMethodV)(_JNIEnv0*, jobject, jmethodID, va_list);
    void        (*_CallVoidMethodA)(_JNIEnv0*, jobject, jmethodID, jvalue*);

    jobject     (*_CallNonvirtualObjectMethod)(_JNIEnv0*, jobject, jclass,
                        jmethodID, ...);
    jobject     (*_CallNonvirtualObjectMethodV)(_JNIEnv0*, jobject, jclass,
                        jmethodID, va_list);
    jobject     (*_CallNonvirtualObjectMethodA)(_JNIEnv0*, jobject, jclass,
                        jmethodID, jvalue*);
    jboolean    (*_CallNonvirtualBooleanMethod)(_JNIEnv0*, jobject, jclass,
                        jmethodID, ...);
    jboolean    (*_CallNonvirtualBooleanMethodV)(_JNIEnv0*, jobject, jclass,
                         jmethodID, va_list);
    jboolean    (*_CallNonvirtualBooleanMethodA)(_JNIEnv0*, jobject, jclass,
                         jmethodID, jvalue*);
    jbyte       (*_CallNonvirtualByteMethod)(_JNIEnv0*, jobject, jclass,
                        jmethodID, ...);
    jbyte       (*_CallNonvirtualByteMethodV)(_JNIEnv0*, jobject, jclass,
                        jmethodID, va_list);
    jbyte       (*_CallNonvirtualByteMethodA)(_JNIEnv0*, jobject, jclass,
                        jmethodID, jvalue*);
    jchar       (*_CallNonvirtualCharMethod)(_JNIEnv0*, jobject, jclass,
                        jmethodID, ...);
    jchar       (*_CallNonvirtualCharMethodV)(_JNIEnv0*, jobject, jclass,
                        jmethodID, va_list);
    jchar       (*_CallNonvirtualCharMethodA)(_JNIEnv0*, jobject, jclass,
                        jmethodID, jvalue*);
    jshort      (*_CallNonvirtualShortMethod)(_JNIEnv0*, jobject, jclass,
                        jmethodID, ...);
    jshort      (*_CallNonvirtualShortMethodV)(_JNIEnv0*, jobject, jclass,
                        jmethodID, va_list);
    jshort      (*_CallNonvirtualShortMethodA)(_JNIEnv0*, jobject, jclass,
                        jmethodID, jvalue*);
    jint        (*_CallNonvirtualIntMethod)(_JNIEnv0*, jobject, jclass,
                        jmethodID, ...);
    jint        (*_CallNonvirtualIntMethodV)(_JNIEnv0*, jobject, jclass,
                        jmethodID, va_list);
    jint        (*_CallNonvirtualIntMethodA)(_JNIEnv0*, jobject, jclass,
                        jmethodID, jvalue*);
    jlong       (*_CallNonvirtualLongMethod)(_JNIEnv0*, jobject, jclass,
                        jmethodID, ...);
    jlong       (*_CallNonvirtualLongMethodV)(_JNIEnv0*, jobject, jclass,
                        jmethodID, va_list);
    jlong       (*_CallNonvirtualLongMethodA)(_JNIEnv0*, jobject, jclass,
                        jmethodID, jvalue*);
    jfloat      (*_CallNonvirtualFloatMethod)(_JNIEnv0*, jobject, jclass,
                        jmethodID, ...);
    jfloat      (*_CallNonvirtualFloatMethodV)(_JNIEnv0*, jobject, jclass,
                        jmethodID, va_list);
    jfloat      (*_CallNonvirtualFloatMethodA)(_JNIEnv0*, jobject, jclass,
                        jmethodID, jvalue*);
    jdouble     (*_CallNonvirtualDoubleMethod)(_JNIEnv0*, jobject, jclass,
                        jmethodID, ...);
    jdouble     (*_CallNonvirtualDoubleMethodV)(_JNIEnv0*, jobject, jclass,
                        jmethodID, va_list);
    jdouble     (*_CallNonvirtualDoubleMethodA)(_JNIEnv0*, jobject, jclass,
                        jmethodID, jvalue*);
    void        (*_CallNonvirtualVoidMethod)(_JNIEnv0*, jobject, jclass,
                        jmethodID, ...);
    void        (*_CallNonvirtualVoidMethodV)(_JNIEnv0*, jobject, jclass,
                        jmethodID, va_list);
    void        (*_CallNonvirtualVoidMethodA)(_JNIEnv0*, jobject, jclass,
                        jmethodID, jvalue*);

    jfieldID    (*_GetFieldID)(_JNIEnv0*, jclass, const char*, const char*);

    jobject     (*_GetObjectField)(_JNIEnv0*, jobject, jfieldID);
    jboolean    (*_GetBooleanField)(_JNIEnv0*, jobject, jfieldID);
    jbyte       (*_GetByteField)(_JNIEnv0*, jobject, jfieldID);
    jchar       (*_GetCharField)(_JNIEnv0*, jobject, jfieldID);
    jshort      (*_GetShortField)(_JNIEnv0*, jobject, jfieldID);
    jint        (*_GetIntField)(_JNIEnv0*, jobject, jfieldID);
    jlong       (*_GetLongField)(_JNIEnv0*, jobject, jfieldID);
    jfloat      (*_GetFloatField)(_JNIEnv0*, jobject, jfieldID);
    jdouble     (*_GetDoubleField)(_JNIEnv0*, jobject, jfieldID);

    void        (*_SetObjectField)(_JNIEnv0*, jobject, jfieldID, jobject);
    void        (*_SetBooleanField)(_JNIEnv0*, jobject, jfieldID, jboolean);
    void        (*_SetByteField)(_JNIEnv0*, jobject, jfieldID, jbyte);
    void        (*_SetCharField)(_JNIEnv0*, jobject, jfieldID, jchar);
    void        (*_SetShortField)(_JNIEnv0*, jobject, jfieldID, jshort);
    void        (*_SetIntField)(_JNIEnv0*, jobject, jfieldID, jint);
    void        (*_SetLongField)(_JNIEnv0*, jobject, jfieldID, jlong);
    void        (*_SetFloatField)(_JNIEnv0*, jobject, jfieldID, jfloat);
    void        (*_SetDoubleField)(_JNIEnv0*, jobject, jfieldID, jdouble);

    jmethodID   (*_GetStaticMethodID)(_JNIEnv0*, jclass, const char*, const char*);

    jobject     (*_CallStaticObjectMethod)(_JNIEnv0*, jclass, jmethodID, ...);
    jobject     (*_CallStaticObjectMethodV)(_JNIEnv0*, jclass, jmethodID, va_list);
    jobject     (*_CallStaticObjectMethodA)(_JNIEnv0*, jclass, jmethodID, jvalue*);
    jboolean    (*_CallStaticBooleanMethod)(_JNIEnv0*, jclass, jmethodID, ...);
    jboolean    (*_CallStaticBooleanMethodV)(_JNIEnv0*, jclass, jmethodID,
                        va_list);
    jboolean    (*_CallStaticBooleanMethodA)(_JNIEnv0*, jclass, jmethodID,
                        jvalue*);
    jbyte       (*_CallStaticByteMethod)(_JNIEnv0*, jclass, jmethodID, ...);
    jbyte       (*_CallStaticByteMethodV)(_JNIEnv0*, jclass, jmethodID, va_list);
    jbyte       (*_CallStaticByteMethodA)(_JNIEnv0*, jclass, jmethodID, jvalue*);
    jchar       (*_CallStaticCharMethod)(_JNIEnv0*, jclass, jmethodID, ...);
    jchar       (*_CallStaticCharMethodV)(_JNIEnv0*, jclass, jmethodID, va_list);
    jchar       (*_CallStaticCharMethodA)(_JNIEnv0*, jclass, jmethodID, jvalue*);
    jshort      (*_CallStaticShortMethod)(_JNIEnv0*, jclass, jmethodID, ...);
    jshort      (*_CallStaticShortMethodV)(_JNIEnv0*, jclass, jmethodID, va_list);
    jshort      (*_CallStaticShortMethodA)(_JNIEnv0*, jclass, jmethodID, jvalue*);
    jint        (*_CallStaticIntMethod)(_JNIEnv0*, jclass, jmethodID, ...);
    jint        (*_CallStaticIntMethodV)(_JNIEnv0*, jclass, jmethodID, va_list);
    jint        (*_CallStaticIntMethodA)(_JNIEnv0*, jclass, jmethodID, jvalue*);
    jlong       (*_CallStaticLongMethod)(_JNIEnv0*, jclass, jmethodID, ...);
    jlong       (*_CallStaticLongMethodV)(_JNIEnv0*, jclass, jmethodID, va_list);
    jlong       (*_CallStaticLongMethodA)(_JNIEnv0*, jclass, jmethodID, jvalue*);
    jfloat      (*_CallStaticFloatMethod)(_JNIEnv0*, jclass, jmethodID, ...);
    jfloat      (*_CallStaticFloatMethodV)(_JNIEnv0*, jclass, jmethodID, va_list);
    jfloat      (*_CallStaticFloatMethodA)(_JNIEnv0*, jclass, jmethodID, jvalue*);
    jdouble     (*_CallStaticDoubleMethod)(_JNIEnv0*, jclass, jmethodID, ...);
    jdouble     (*_CallStaticDoubleMethodV)(_JNIEnv0*, jclass, jmethodID, va_list);
    jdouble     (*_CallStaticDoubleMethodA)(_JNIEnv0*, jclass, jmethodID, jvalue*);
    void        (*_CallStaticVoidMethod)(_JNIEnv0*, jclass, jmethodID, ...);
    void        (*_CallStaticVoidMethodV)(_JNIEnv0*, jclass, jmethodID, va_list);
    void        (*_CallStaticVoidMethodA)(_JNIEnv0*, jclass, jmethodID, jvalue*);

    jfieldID    (*_GetStaticFieldID)(_JNIEnv0*, jclass, const char*,
                        const char*);

    jobject     (*_GetStaticObjectField)(_JNIEnv0*, jclass, jfieldID);
    jboolean    (*_GetStaticBooleanField)(_JNIEnv0*, jclass, jfieldID);
    jbyte       (*_GetStaticByteField)(_JNIEnv0*, jclass, jfieldID);
    jchar       (*_GetStaticCharField)(_JNIEnv0*, jclass, jfieldID);
    jshort      (*_GetStaticShortField)(_JNIEnv0*, jclass, jfieldID);
    jint        (*_GetStaticIntField)(_JNIEnv0*, jclass, jfieldID);
    jlong       (*_GetStaticLongField)(_JNIEnv0*, jclass, jfieldID);
    jfloat      (*_GetStaticFloatField)(_JNIEnv0*, jclass, jfieldID);
    jdouble     (*_GetStaticDoubleField)(_JNIEnv0*, jclass, jfieldID);

    void        (*_SetStaticObjectField)(_JNIEnv0*, jclass, jfieldID, jobject);
    void        (*_SetStaticBooleanField)(_JNIEnv0*, jclass, jfieldID, jboolean);
    void        (*_SetStaticByteField)(_JNIEnv0*, jclass, jfieldID, jbyte);
    void        (*_SetStaticCharField)(_JNIEnv0*, jclass, jfieldID, jchar);
    void        (*_SetStaticShortField)(_JNIEnv0*, jclass, jfieldID, jshort);
    void        (*_SetStaticIntField)(_JNIEnv0*, jclass, jfieldID, jint);
    void        (*_SetStaticLongField)(_JNIEnv0*, jclass, jfieldID, jlong);
    void        (*_SetStaticFloatField)(_JNIEnv0*, jclass, jfieldID, jfloat);
    void        (*_SetStaticDoubleField)(_JNIEnv0*, jclass, jfieldID, jdouble);

    jstring     (*_NewString)(_JNIEnv0*, const jchar*, jsize);
    jsize       (*_GetStringLength)(_JNIEnv0*, jstring);
    const jchar* (*_GetStringChars)(_JNIEnv0*, jstring, jboolean*);
    void        (*_ReleaseStringChars)(_JNIEnv0*, jstring, const jchar*);
    jstring     (*_NewStringUTF)(_JNIEnv0*, const char*);
    jsize       (*_GetStringUTFLength)(_JNIEnv0*, jstring);
    /* JNI spec says this returns const jbyte*, but that's inconsistent */
    const char* (*_GetStringUTFChars)(_JNIEnv0*, jstring, jboolean*);
    void        (*_ReleaseStringUTFChars)(_JNIEnv0*, jstring, const char*);
    jsize       (*_GetArrayLength)(_JNIEnv0*, jarray);
    jobjectArray (*_NewObjectArray)(_JNIEnv0*, jsize, jclass, jobject);
    jobject     (*_GetObjectArrayElement)(_JNIEnv0*, jobjectArray, jsize);
    void        (*_SetObjectArrayElement)(_JNIEnv0*, jobjectArray, jsize, jobject);

    jbooleanArray (*_NewBooleanArray)(_JNIEnv0*, jsize);
    jbyteArray    (*_NewByteArray)(_JNIEnv0*, jsize);
    jcharArray    (*_NewCharArray)(_JNIEnv0*, jsize);
    jshortArray   (*_NewShortArray)(_JNIEnv0*, jsize);
    jintArray     (*_NewIntArray)(_JNIEnv0*, jsize);
    jlongArray    (*_NewLongArray)(_JNIEnv0*, jsize);
    jfloatArray   (*_NewFloatArray)(_JNIEnv0*, jsize);
    jdoubleArray  (*_NewDoubleArray)(_JNIEnv0*, jsize);

    jboolean*   (*_GetBooleanArrayElements)(_JNIEnv0*, jbooleanArray, jboolean*);
    jbyte*      (*_GetByteArrayElements)(_JNIEnv0*, jbyteArray, jboolean*);
    jchar*      (*_GetCharArrayElements)(_JNIEnv0*, jcharArray, jboolean*);
    jshort*     (*_GetShortArrayElements)(_JNIEnv0*, jshortArray, jboolean*);
    jint*       (*_GetIntArrayElements)(_JNIEnv0*, jintArray, jboolean*);
    jlong*      (*_GetLongArrayElements)(_JNIEnv0*, jlongArray, jboolean*);
    jfloat*     (*_GetFloatArrayElements)(_JNIEnv0*, jfloatArray, jboolean*);
    jdouble*    (*_GetDoubleArrayElements)(_JNIEnv0*, jdoubleArray, jboolean*);

    void        (*_ReleaseBooleanArrayElements)(_JNIEnv0*, jbooleanArray,
                        jboolean*, jint);
    void        (*_ReleaseByteArrayElements)(_JNIEnv0*, jbyteArray,
                        jbyte*, jint);
    void        (*_ReleaseCharArrayElements)(_JNIEnv0*, jcharArray,
                        jchar*, jint);
    void        (*_ReleaseShortArrayElements)(_JNIEnv0*, jshortArray,
                        jshort*, jint);
    void        (*_ReleaseIntArrayElements)(_JNIEnv0*, jintArray,
                        jint*, jint);
    void        (*_ReleaseLongArrayElements)(_JNIEnv0*, jlongArray,
                        jlong*, jint);
    void        (*_ReleaseFloatArrayElements)(_JNIEnv0*, jfloatArray,
                        jfloat*, jint);
    void        (*_ReleaseDoubleArrayElements)(_JNIEnv0*, jdoubleArray,
                        jdouble*, jint);

    void        (*_GetBooleanArrayRegion)(_JNIEnv0*, jbooleanArray,
                        jsize, jsize, jboolean*);
    void        (*_GetByteArrayRegion)(_JNIEnv0*, jbyteArray,
                        jsize, jsize, jbyte*);
    void        (*_GetCharArrayRegion)(_JNIEnv0*, jcharArray,
                        jsize, jsize, jchar*);
    void        (*_GetShortArrayRegion)(_JNIEnv0*, jshortArray,
                        jsize, jsize, jshort*);
    void        (*_GetIntArrayRegion)(_JNIEnv0*, jintArray,
                        jsize, jsize, jint*);
    void        (*_GetLongArrayRegion)(_JNIEnv0*, jlongArray,
                        jsize, jsize, jlong*);
    void        (*_GetFloatArrayRegion)(_JNIEnv0*, jfloatArray,
                        jsize, jsize, jfloat*);
    void        (*_GetDoubleArrayRegion)(_JNIEnv0*, jdoubleArray,
                        jsize, jsize, jdouble*);

    /* spec shows these without const; some jni.h do, some don't */
    void        (*_SetBooleanArrayRegion)(_JNIEnv0*, jbooleanArray,
                        jsize, jsize, const jboolean*);
    void        (*_SetByteArrayRegion)(_JNIEnv0*, jbyteArray,
                        jsize, jsize, const jbyte*);
    void        (*_SetCharArrayRegion)(_JNIEnv0*, jcharArray,
                        jsize, jsize, const jchar*);
    void        (*_SetShortArrayRegion)(_JNIEnv0*, jshortArray,
                        jsize, jsize, const jshort*);
    void        (*_SetIntArrayRegion)(_JNIEnv0*, jintArray,
                        jsize, jsize, const jint*);
    void        (*_SetLongArrayRegion)(_JNIEnv0*, jlongArray,
                        jsize, jsize, const jlong*);
    void        (*_SetFloatArrayRegion)(_JNIEnv0*, jfloatArray,
                        jsize, jsize, const jfloat*);
    void        (*_SetDoubleArrayRegion)(_JNIEnv0*, jdoubleArray,
                        jsize, jsize, const jdouble*);

    jint        (*_RegisterNatives)(_JNIEnv0*, jclass, const JNINativeMethod*,
                        jint);
    jint        (*_UnregisterNatives)(_JNIEnv0*, jclass);
    jint        (*_MonitorEnter)(_JNIEnv0*, jobject);
    jint        (*_MonitorExit)(_JNIEnv0*, jobject);
    jint        (*_GetJavaVM)(_JNIEnv0*, JavaVM**);

    void        (*_GetStringRegion)(_JNIEnv0*, jstring, jsize, jsize, jchar*);
    void        (*_GetStringUTFRegion)(_JNIEnv0*, jstring, jsize, jsize, char*);

    void*       (*_GetPrimitiveArrayCritical)(_JNIEnv0*, jarray, jboolean*);
    void        (*_ReleasePrimitiveArrayCritical)(_JNIEnv0*, jarray, void*, jint);

    const jchar* (*_GetStringCritical)(_JNIEnv0*, jstring, jboolean*);
    void        (*_ReleaseStringCritical)(_JNIEnv0*, jstring, const jchar*);

    jweak       (*_NewWeakGlobalRef)(_JNIEnv0*, jobject);
    void        (*_DeleteWeakGlobalRef)(_JNIEnv0*, jweak);

    jboolean    (*_ExceptionCheck)(_JNIEnv0*);

    jobject     (*_NewDirectByteBuffer)(_JNIEnv0*, void*, jlong);
    void*       (*_GetDirectBufferAddress)(_JNIEnv0*, jobject);
    jlong       (*_GetDirectBufferCapacity)(_JNIEnv0*, jobject);

    /* added in JNI 1.6 */
    jobjectRefType (*_GetObjectRefType)(_JNIEnv0*, jobject);

	/* added for Fastiva */
    jint        (*_RegisterFastNatives)(_JNIEnv0*, jclass, const JNINativeMethod*,
                        jint);
    FNI_METHOD  _InvokeDirect;
    FNI_METHOD  _InvokeStatic;
    FNI_METHOD  _InvokeVirtual;
    void        (*_BeginInvoke)(void* fni);
    void        (*_EndInvoke)(void* fni);
    void        (*_ReleaseArray)(jobject obj);
};

/*
 * C++ object wrapper.
 *
 * This is usually overlaid on a C struct whose first element is a
 * JNINativeInterface*.  We rely somewhat on compiler behavior.
 */
struct _JNIEnv0 {
    /* do not rename this; it does not seem to be entirely opaque */
    const struct JNINativeInterface* functions;

    jint GetVersion()
    { return functions->_GetVersion(this); }

    jclass DefineClass(const char *name, jobject loader, const jbyte* buf,
        jsize bufLen)
    { return functions->_DefineClass(this, name, loader, buf, bufLen); }

    jclass FindClass(const char* name)
    { return functions->_FindClass(this, name); }

    jmethodID FromReflectedMethod(jobject method)
    { return functions->_FromReflectedMethod(this, method); }

    jfieldID FromReflectedField(jobject field)
    { return functions->_FromReflectedField(this, field); }

    jobject ToReflectedMethod(jclass cls, jmethodID methodID, jboolean isStatic)
    { return functions->_ToReflectedMethod(this, cls, methodID, isStatic); }

    jclass GetSuperclass(jclass clazz)
    { return functions->_GetSuperclass(this, clazz); }

    jboolean IsAssignableFrom(jclass clazz1, jclass clazz2)
    { return functions->_IsAssignableFrom(this, clazz1, clazz2); }

    jobject ToReflectedField(jclass cls, jfieldID fieldID, jboolean isStatic)
    { return functions->_ToReflectedField(this, cls, fieldID, isStatic); }

    jint Throw(jthrowable obj)
    { return functions->_Throw(this, obj); }

    jint ThrowNew(jclass clazz, const char* message)
    { return functions->_ThrowNew(this, clazz, message); }

    jthrowable ExceptionOccurred()
    { return functions->_ExceptionOccurred(this); }

    void ExceptionDescribe()
    { functions->_ExceptionDescribe(this); }

    void ExceptionClear()
    { functions->_ExceptionClear(this); }

    void FatalError(const char* msg)
    { functions->_FatalError(this, msg); }

    jint PushLocalFrame(jint capacity)
    { return functions->_PushLocalFrame(this, capacity); }

    jobject PopLocalFrame(jobject result)
    { return functions->_PopLocalFrame(this, result); }

    jobject NewGlobalRef(jobject obj)
    { return functions->_NewGlobalRef(this, obj); }

    void DeleteGlobalRef(jobject globalRef)
    { functions->_DeleteGlobalRef(this, globalRef); }

    void DeleteLocalRef(jobject localRef)
    { functions->_DeleteLocalRef(this, localRef); }

    jboolean IsSameObject(jobject ref1, jobject ref2)
    { return functions->_IsSameObject(this, ref1, ref2); }

    jobject NewLocalRef(jobject ref)
    { return functions->_NewLocalRef(this, ref); }

    jint EnsureLocalCapacity(jint capacity)
    { return functions->_EnsureLocalCapacity(this, capacity); }

    jobject AllocObject(jclass clazz)
    { return functions->_AllocObject(this, clazz); }

    jobject NewObject(jclass clazz, jmethodID methodID, ...)
    {
        va_list args;
        va_start(args, methodID);
        jobject result = functions->_NewObjectV(this, clazz, methodID, args);
        va_end(args);
        return result;
    }

    jobject NewObjectV(jclass clazz, jmethodID methodID, va_list args)
    { return functions->_NewObjectV(this, clazz, methodID, args); }

    jobject NewObjectA(jclass clazz, jmethodID methodID, jvalue* args)
    { return functions->_NewObjectA(this, clazz, methodID, args); }

    jclass GetObjectClass(jobject obj)
    { return functions->_GetObjectClass(this, obj); }

    jboolean IsInstanceOf(jobject obj, jclass clazz)
    { return functions->_IsInstanceOf(this, obj, clazz); }

    jmethodID GetMethodID(jclass clazz, const char* name, const char* sig)
    { return functions->_GetMethodID(this, clazz, name, sig); }

#define CALL_TYPE_METHOD(_jtype, _jname)                                    \
    _jtype Call##_jname##Method(jobject obj, jmethodID methodID, ...)       \
    {                                                                       \
        _jtype result;                                                      \
        va_list args;                                                       \
        va_start(args, methodID);                                           \
        result = functions->_Call##_jname##MethodV(this, obj, methodID,      \
                    args);                                                  \
        va_end(args);                                                       \
        return result;                                                      \
    }
#define CALL_TYPE_METHODV(_jtype, _jname)                                   \
    _jtype Call##_jname##MethodV(jobject obj, jmethodID methodID,           \
        va_list args)                                                       \
    { return functions->_Call##_jname##MethodV(this, obj, methodID, args); }
#define CALL_TYPE_METHODA(_jtype, _jname)                                   \
    _jtype Call##_jname##MethodA(jobject obj, jmethodID methodID,           \
        jvalue* args)                                                       \
    { return functions->_Call##_jname##MethodA(this, obj, methodID, args); }

#define CALL_TYPE(_jtype, _jname)                                           \
    CALL_TYPE_METHOD(_jtype, _jname)                                        \
    CALL_TYPE_METHODV(_jtype, _jname)                                       \
    CALL_TYPE_METHODA(_jtype, _jname)

    CALL_TYPE(jobject, Object)
    CALL_TYPE(jboolean, Boolean)
    CALL_TYPE(jbyte, Byte)
    CALL_TYPE(jchar, Char)
    CALL_TYPE(jshort, Short)
    CALL_TYPE(jint, Int)
    CALL_TYPE(jlong, Long)
    CALL_TYPE(jfloat, Float)
    CALL_TYPE(jdouble, Double)

    void CallVoidMethod(jobject obj, jmethodID methodID, ...)
    {
        va_list args;
        va_start(args, methodID);
        functions->_CallVoidMethodV(this, obj, methodID, args);
        va_end(args);
    }
    void CallVoidMethodV(jobject obj, jmethodID methodID, va_list args)
    { functions->_CallVoidMethodV(this, obj, methodID, args); }
    void CallVoidMethodA(jobject obj, jmethodID methodID, jvalue* args)
    { functions->_CallVoidMethodA(this, obj, methodID, args); }

#define CALL_NONVIRT_TYPE_METHOD(_jtype, _jname)                            \
    _jtype CallNonvirtual##_jname##Method(jobject obj, jclass clazz,        \
        jmethodID methodID, ...)                                            \
    {                                                                       \
        _jtype result;                                                      \
        va_list args;                                                       \
        va_start(args, methodID);                                           \
        result = functions->_CallNonvirtual##_jname##MethodV(this, obj,      \
                    clazz, methodID, args);                                 \
        va_end(args);                                                       \
        return result;                                                      \
    }
#define CALL_NONVIRT_TYPE_METHODV(_jtype, _jname)                           \
    _jtype CallNonvirtual##_jname##MethodV(jobject obj, jclass clazz,       \
        jmethodID methodID, va_list args)                                   \
    { return functions->_CallNonvirtual##_jname##MethodV(this, obj, clazz,   \
        methodID, args); }
#define CALL_NONVIRT_TYPE_METHODA(_jtype, _jname)                           \
    _jtype CallNonvirtual##_jname##MethodA(jobject obj, jclass clazz,       \
        jmethodID methodID, jvalue* args)                                   \
    { return functions->_CallNonvirtual##_jname##MethodA(this, obj, clazz,   \
        methodID, args); }

#define CALL_NONVIRT_TYPE(_jtype, _jname)                                   \
    CALL_NONVIRT_TYPE_METHOD(_jtype, _jname)                                \
    CALL_NONVIRT_TYPE_METHODV(_jtype, _jname)                               \
    CALL_NONVIRT_TYPE_METHODA(_jtype, _jname)

    CALL_NONVIRT_TYPE(jobject, Object)
    CALL_NONVIRT_TYPE(jboolean, Boolean)
    CALL_NONVIRT_TYPE(jbyte, Byte)
    CALL_NONVIRT_TYPE(jchar, Char)
    CALL_NONVIRT_TYPE(jshort, Short)
    CALL_NONVIRT_TYPE(jint, Int)
    CALL_NONVIRT_TYPE(jlong, Long)
    CALL_NONVIRT_TYPE(jfloat, Float)
    CALL_NONVIRT_TYPE(jdouble, Double)

    void CallNonvirtualVoidMethod(jobject obj, jclass clazz,
        jmethodID methodID, ...)
    {
        va_list args;
        va_start(args, methodID);
        functions->_CallNonvirtualVoidMethodV(this, obj, clazz, methodID, args);
        va_end(args);
    }
    void CallNonvirtualVoidMethodV(jobject obj, jclass clazz,
        jmethodID methodID, va_list args)
    { functions->_CallNonvirtualVoidMethodV(this, obj, clazz, methodID, args); }
    void CallNonvirtualVoidMethodA(jobject obj, jclass clazz,
        jmethodID methodID, jvalue* args)
    { functions->_CallNonvirtualVoidMethodA(this, obj, clazz, methodID, args); }

    jfieldID GetFieldID(jclass clazz, const char* name, const char* sig)
    { return functions->_GetFieldID(this, clazz, name, sig); }

    jobject GetObjectField(jobject obj, jfieldID fieldID)
    { return functions->_GetObjectField(this, obj, fieldID); }
    jboolean GetBooleanField(jobject obj, jfieldID fieldID)
    { return functions->_GetBooleanField(this, obj, fieldID); }
    jbyte GetByteField(jobject obj, jfieldID fieldID)
    { return functions->_GetByteField(this, obj, fieldID); }
    jchar GetCharField(jobject obj, jfieldID fieldID)
    { return functions->_GetCharField(this, obj, fieldID); }
    jshort GetShortField(jobject obj, jfieldID fieldID)
    { return functions->_GetShortField(this, obj, fieldID); }
    jint GetIntField(jobject obj, jfieldID fieldID)
    { return functions->_GetIntField(this, obj, fieldID); }
    jlong GetLongField(jobject obj, jfieldID fieldID)
    { return functions->_GetLongField(this, obj, fieldID); }
    jfloat GetFloatField(jobject obj, jfieldID fieldID)
    { return functions->_GetFloatField(this, obj, fieldID); }
    jdouble GetDoubleField(jobject obj, jfieldID fieldID)
    { return functions->_GetDoubleField(this, obj, fieldID); }

    void SetObjectField(jobject obj, jfieldID fieldID, jobject value)
    { functions->_SetObjectField(this, obj, fieldID, value); }
    void SetBooleanField(jobject obj, jfieldID fieldID, jboolean value)
    { functions->_SetBooleanField(this, obj, fieldID, value); }
    void SetByteField(jobject obj, jfieldID fieldID, jbyte value)
    { functions->_SetByteField(this, obj, fieldID, value); }
    void SetCharField(jobject obj, jfieldID fieldID, jchar value)
    { functions->_SetCharField(this, obj, fieldID, value); }
    void SetShortField(jobject obj, jfieldID fieldID, jshort value)
    { functions->_SetShortField(this, obj, fieldID, value); }
    void SetIntField(jobject obj, jfieldID fieldID, jint value)
    { functions->_SetIntField(this, obj, fieldID, value); }
    void SetLongField(jobject obj, jfieldID fieldID, jlong value)
    { functions->_SetLongField(this, obj, fieldID, value); }
    void SetFloatField(jobject obj, jfieldID fieldID, jfloat value)
    { functions->_SetFloatField(this, obj, fieldID, value); }
    void SetDoubleField(jobject obj, jfieldID fieldID, jdouble value)
    { functions->_SetDoubleField(this, obj, fieldID, value); }

    jmethodID GetStaticMethodID(jclass clazz, const char* name, const char* sig)
    { return functions->_GetStaticMethodID(this, clazz, name, sig); }

#define CALL_STATIC_TYPE_METHOD(_jtype, _jname)                             \
    _jtype CallStatic##_jname##Method(jclass clazz, jmethodID methodID,     \
        ...)                                                                \
    {                                                                       \
        _jtype result;                                                      \
        va_list args;                                                       \
        va_start(args, methodID);                                           \
        result = functions->_CallStatic##_jname##MethodV(this, clazz,        \
                    methodID, args);                                        \
        va_end(args);                                                       \
        return result;                                                      \
    }
#define CALL_STATIC_TYPE_METHODV(_jtype, _jname)                            \
    _jtype CallStatic##_jname##MethodV(jclass clazz, jmethodID methodID,    \
        va_list args)                                                       \
    { return functions->_CallStatic##_jname##MethodV(this, clazz, methodID,  \
        args); }
#define CALL_STATIC_TYPE_METHODA(_jtype, _jname)                            \
    _jtype CallStatic##_jname##MethodA(jclass clazz, jmethodID methodID,    \
        jvalue* args)                                                       \
    { return functions->_CallStatic##_jname##MethodA(this, clazz, methodID,  \
        args); }

#define CALL_STATIC_TYPE(_jtype, _jname)                                    \
    CALL_STATIC_TYPE_METHOD(_jtype, _jname)                                 \
    CALL_STATIC_TYPE_METHODV(_jtype, _jname)                                \
    CALL_STATIC_TYPE_METHODA(_jtype, _jname)

    CALL_STATIC_TYPE(jobject, Object)
    CALL_STATIC_TYPE(jboolean, Boolean)
    CALL_STATIC_TYPE(jbyte, Byte)
    CALL_STATIC_TYPE(jchar, Char)
    CALL_STATIC_TYPE(jshort, Short)
    CALL_STATIC_TYPE(jint, Int)
    CALL_STATIC_TYPE(jlong, Long)
    CALL_STATIC_TYPE(jfloat, Float)
    CALL_STATIC_TYPE(jdouble, Double)

    void CallStaticVoidMethod(jclass clazz, jmethodID methodID, ...)
    {
        va_list args;
        va_start(args, methodID);
        functions->_CallStaticVoidMethodV(this, clazz, methodID, args);
        va_end(args);
    }
    void CallStaticVoidMethodV(jclass clazz, jmethodID methodID, va_list args)
    { functions->_CallStaticVoidMethodV(this, clazz, methodID, args); }
    void CallStaticVoidMethodA(jclass clazz, jmethodID methodID, jvalue* args)
    { functions->_CallStaticVoidMethodA(this, clazz, methodID, args); }

    jfieldID GetStaticFieldID(jclass clazz, const char* name, const char* sig)
    { return functions->_GetStaticFieldID(this, clazz, name, sig); }

    jobject GetStaticObjectField(jclass clazz, jfieldID fieldID)
    { return functions->_GetStaticObjectField(this, clazz, fieldID); }
    jboolean GetStaticBooleanField(jclass clazz, jfieldID fieldID)
    { return functions->_GetStaticBooleanField(this, clazz, fieldID); }
    jbyte GetStaticByteField(jclass clazz, jfieldID fieldID)
    { return functions->_GetStaticByteField(this, clazz, fieldID); }
    jchar GetStaticCharField(jclass clazz, jfieldID fieldID)
    { return functions->_GetStaticCharField(this, clazz, fieldID); }
    jshort GetStaticShortField(jclass clazz, jfieldID fieldID)
    { return functions->_GetStaticShortField(this, clazz, fieldID); }
    jint GetStaticIntField(jclass clazz, jfieldID fieldID)
    { return functions->_GetStaticIntField(this, clazz, fieldID); }
    jlong GetStaticLongField(jclass clazz, jfieldID fieldID)
    { return functions->_GetStaticLongField(this, clazz, fieldID); }
    jfloat GetStaticFloatField(jclass clazz, jfieldID fieldID)
    { return functions->_GetStaticFloatField(this, clazz, fieldID); }
    jdouble GetStaticDoubleField(jclass clazz, jfieldID fieldID)
    { return functions->_GetStaticDoubleField(this, clazz, fieldID); }

    void SetStaticObjectField(jclass clazz, jfieldID fieldID, jobject value)
    { functions->_SetStaticObjectField(this, clazz, fieldID, value); }
    void SetStaticBooleanField(jclass clazz, jfieldID fieldID, jboolean value)
    { functions->_SetStaticBooleanField(this, clazz, fieldID, value); }
    void SetStaticByteField(jclass clazz, jfieldID fieldID, jbyte value)
    { functions->_SetStaticByteField(this, clazz, fieldID, value); }
    void SetStaticCharField(jclass clazz, jfieldID fieldID, jchar value)
    { functions->_SetStaticCharField(this, clazz, fieldID, value); }
    void SetStaticShortField(jclass clazz, jfieldID fieldID, jshort value)
    { functions->_SetStaticShortField(this, clazz, fieldID, value); }
    void SetStaticIntField(jclass clazz, jfieldID fieldID, jint value)
    { functions->_SetStaticIntField(this, clazz, fieldID, value); }
    void SetStaticLongField(jclass clazz, jfieldID fieldID, jlong value)
    { functions->_SetStaticLongField(this, clazz, fieldID, value); }
    void SetStaticFloatField(jclass clazz, jfieldID fieldID, jfloat value)
    { functions->_SetStaticFloatField(this, clazz, fieldID, value); }
    void SetStaticDoubleField(jclass clazz, jfieldID fieldID, jdouble value)
    { functions->_SetStaticDoubleField(this, clazz, fieldID, value); }

    jstring NewString(const jchar* unicodeChars, jsize len)
    { return functions->_NewString(this, unicodeChars, len); }

    jsize GetStringLength(jstring string)
    { return functions->_GetStringLength(this, string); }

    const jchar* GetStringChars(jstring string, jboolean* isCopy)
    { return functions->_GetStringChars(this, string, isCopy); }

    void ReleaseStringChars(jstring string, const jchar* chars)
    { functions->_ReleaseStringChars(this, string, chars); }

    jstring NewStringUTF(const char* bytes)
    { return functions->_NewStringUTF(this, bytes); }

    jsize GetStringUTFLength(jstring string)
    { return functions->_GetStringUTFLength(this, string); }

    const char* GetStringUTFChars(jstring string, jboolean* isCopy)
    { return functions->_GetStringUTFChars(this, string, isCopy); }

    void ReleaseStringUTFChars(jstring string, const char* utf)
    { functions->_ReleaseStringUTFChars(this, string, utf); }

    jsize GetArrayLength(jarray array)
    { return functions->_GetArrayLength(this, array); }

    jobjectArray NewObjectArray(jsize length, jclass elementClass,
        jobject initialElement)
    { return functions->_NewObjectArray(this, length, elementClass,
        initialElement); }

    jobject GetObjectArrayElement(jobjectArray array, jsize index)
    { return functions->_GetObjectArrayElement(this, array, index); }

    void SetObjectArrayElement(jobjectArray array, jsize index, jobject value)
    { functions->_SetObjectArrayElement(this, array, index, value); }

    jbooleanArray NewBooleanArray(jsize length)
    { return functions->_NewBooleanArray(this, length); }
    jbyteArray NewByteArray(jsize length)
    { return functions->_NewByteArray(this, length); }
    jcharArray NewCharArray(jsize length)
    { return functions->_NewCharArray(this, length); }
    jshortArray NewShortArray(jsize length)
    { return functions->_NewShortArray(this, length); }
    jintArray NewIntArray(jsize length)
    { return functions->_NewIntArray(this, length); }
    jlongArray NewLongArray(jsize length)
    { return functions->_NewLongArray(this, length); }
    jfloatArray NewFloatArray(jsize length)
    { return functions->_NewFloatArray(this, length); }
    jdoubleArray NewDoubleArray(jsize length)
    { return functions->_NewDoubleArray(this, length); }

    jboolean* GetBooleanArrayElements(jbooleanArray array, jboolean* isCopy)
    { return functions->_GetBooleanArrayElements(this, array, isCopy); }
    jbyte* GetByteArrayElements(jbyteArray array, jboolean* isCopy)
    { return functions->_GetByteArrayElements(this, array, isCopy); }
    jchar* GetCharArrayElements(jcharArray array, jboolean* isCopy)
    { return functions->_GetCharArrayElements(this, array, isCopy); }
    jshort* GetShortArrayElements(jshortArray array, jboolean* isCopy)
    { return functions->_GetShortArrayElements(this, array, isCopy); }
    jint* GetIntArrayElements(jintArray array, jboolean* isCopy)
    { return functions->_GetIntArrayElements(this, array, isCopy); }
    jlong* GetLongArrayElements(jlongArray array, jboolean* isCopy)
    { return functions->_GetLongArrayElements(this, array, isCopy); }
    jfloat* GetFloatArrayElements(jfloatArray array, jboolean* isCopy)
    { return functions->_GetFloatArrayElements(this, array, isCopy); }
    jdouble* GetDoubleArrayElements(jdoubleArray array, jboolean* isCopy)
    { return functions->_GetDoubleArrayElements(this, array, isCopy); }

    void ReleaseBooleanArrayElements(jbooleanArray array, jboolean* elems,
        jint mode)
    { functions->_ReleaseBooleanArrayElements(this, array, elems, mode); }
    void ReleaseByteArrayElements(jbyteArray array, jbyte* elems,
        jint mode)
    { functions->_ReleaseByteArrayElements(this, array, elems, mode); }
    void ReleaseCharArrayElements(jcharArray array, jchar* elems,
        jint mode)
    { functions->_ReleaseCharArrayElements(this, array, elems, mode); }
    void ReleaseShortArrayElements(jshortArray array, jshort* elems,
        jint mode)
    { functions->_ReleaseShortArrayElements(this, array, elems, mode); }
    void ReleaseIntArrayElements(jintArray array, jint* elems,
        jint mode)
    { functions->_ReleaseIntArrayElements(this, array, elems, mode); }
    void ReleaseLongArrayElements(jlongArray array, jlong* elems,
        jint mode)
    { functions->_ReleaseLongArrayElements(this, array, elems, mode); }
    void ReleaseFloatArrayElements(jfloatArray array, jfloat* elems,
        jint mode)
    { functions->_ReleaseFloatArrayElements(this, array, elems, mode); }
    void ReleaseDoubleArrayElements(jdoubleArray array, jdouble* elems,
        jint mode)
    { functions->_ReleaseDoubleArrayElements(this, array, elems, mode); }

    void GetBooleanArrayRegion(jbooleanArray array, jsize start, jsize len,
        jboolean* buf)
    { functions->_GetBooleanArrayRegion(this, array, start, len, buf); }
    void GetByteArrayRegion(jbyteArray array, jsize start, jsize len,
        jbyte* buf)
    { functions->_GetByteArrayRegion(this, array, start, len, buf); }
    void GetCharArrayRegion(jcharArray array, jsize start, jsize len,
        jchar* buf)
    { functions->_GetCharArrayRegion(this, array, start, len, buf); }
    void GetShortArrayRegion(jshortArray array, jsize start, jsize len,
        jshort* buf)
    { functions->_GetShortArrayRegion(this, array, start, len, buf); }
    void GetIntArrayRegion(jintArray array, jsize start, jsize len,
        jint* buf)
    { functions->_GetIntArrayRegion(this, array, start, len, buf); }
    void GetLongArrayRegion(jlongArray array, jsize start, jsize len,
        jlong* buf)
    { functions->_GetLongArrayRegion(this, array, start, len, buf); }
    void GetFloatArrayRegion(jfloatArray array, jsize start, jsize len,
        jfloat* buf)
    { functions->_GetFloatArrayRegion(this, array, start, len, buf); }
    void GetDoubleArrayRegion(jdoubleArray array, jsize start, jsize len,
        jdouble* buf)
    { functions->_GetDoubleArrayRegion(this, array, start, len, buf); }

    void SetBooleanArrayRegion(jbooleanArray array, jsize start, jsize len,
        const jboolean* buf)
    { functions->_SetBooleanArrayRegion(this, array, start, len, buf); }
    void SetByteArrayRegion(jbyteArray array, jsize start, jsize len,
        const jbyte* buf)
    { functions->_SetByteArrayRegion(this, array, start, len, buf); }
    void SetCharArrayRegion(jcharArray array, jsize start, jsize len,
        const jchar* buf)
    { functions->_SetCharArrayRegion(this, array, start, len, buf); }
    void SetShortArrayRegion(jshortArray array, jsize start, jsize len,
        const jshort* buf)
    { functions->_SetShortArrayRegion(this, array, start, len, buf); }
    void SetIntArrayRegion(jintArray array, jsize start, jsize len,
        const jint* buf)
    { functions->_SetIntArrayRegion(this, array, start, len, buf); }
    void SetLongArrayRegion(jlongArray array, jsize start, jsize len,
        const jlong* buf)
    { functions->_SetLongArrayRegion(this, array, start, len, buf); }
    void SetFloatArrayRegion(jfloatArray array, jsize start, jsize len,
        const jfloat* buf)
    { functions->_SetFloatArrayRegion(this, array, start, len, buf); }
    void SetDoubleArrayRegion(jdoubleArray array, jsize start, jsize len,
        const jdouble* buf)
    { functions->_SetDoubleArrayRegion(this, array, start, len, buf); }

    jint RegisterNatives(jclass clazz, const JNINativeMethod* methods,
        jint nMethods)
    { return functions->_RegisterNatives(this, clazz, methods, nMethods); }

    jint UnregisterNatives(jclass clazz)
    { return functions->_UnregisterNatives(this, clazz); }

    jint MonitorEnter(jobject obj)
    { return functions->_MonitorEnter(this, obj); }

    jint MonitorExit(jobject obj)
    { return functions->_MonitorExit(this, obj); }

    jint GetJavaVM(JavaVM** vm)
    { return functions->_GetJavaVM(this, vm); }

    void GetStringRegion(jstring str, jsize start, jsize len, jchar* buf)
    { functions->_GetStringRegion(this, str, start, len, buf); }

    void GetStringUTFRegion(jstring str, jsize start, jsize len, char* buf)
    { return functions->_GetStringUTFRegion(this, str, start, len, buf); }

    void* GetPrimitiveArrayCritical(jarray array, jboolean* isCopy)
    { return functions->_GetPrimitiveArrayCritical(this, array, isCopy); }

    void ReleasePrimitiveArrayCritical(jarray array, void* carray, jint mode)
    { functions->_ReleasePrimitiveArrayCritical(this, array, carray, mode); }

    const jchar* GetStringCritical(jstring string, jboolean* isCopy)
    { return functions->_GetStringCritical(this, string, isCopy); }

    void ReleaseStringCritical(jstring string, const jchar* carray)
    { functions->_ReleaseStringCritical(this, string, carray); }

    jweak NewWeakGlobalRef(jobject obj)
    { return functions->_NewWeakGlobalRef(this, obj); }

    void DeleteWeakGlobalRef(jweak obj)
    { functions->_DeleteWeakGlobalRef(this, obj); }

    jboolean ExceptionCheck()
    { return functions->_ExceptionCheck(this); }

    jobject NewDirectByteBuffer(void* address, jlong capacity)
    { return functions->_NewDirectByteBuffer(this, address, capacity); }

    void* GetDirectBufferAddress(jobject buf)
    { return functions->_GetDirectBufferAddress(this, buf); }

    jlong GetDirectBufferCapacity(jobject buf)
    { return functions->_GetDirectBufferCapacity(this, buf); }

    /* added in JNI 1.6 */
    jobjectRefType GetObjectRefType(jobject obj)
    { return functions->_GetObjectRefType(this, obj); }

};


/*
 * JNI invocation interface.
 */
struct JNIInvokeInterface {
    void*       reserved0;
    void*       reserved1;
    void*       reserved2;

    jint        (*DestroyJavaVM)(JavaVM*);
    jint        (*AttachCurrentThread)(JavaVM*, JNIEnv**, void*);
    jint        (*DetachCurrentThread)(JavaVM*);
    jint        (*GetEnv)(JavaVM*, void**, jint);
    jint        (*AttachCurrentThreadAsDaemon)(JavaVM*, JNIEnv**, void*);
};

/*
 * C++ version.
 */
struct _JavaVM {
    const struct JNIInvokeInterface* functions;

    jint DestroyJavaVM()
    { return functions->DestroyJavaVM(this); }
    jint AttachCurrentThread(JNIEnv** p_env, void* thr_args)
    { return functions->AttachCurrentThread(this, p_env, thr_args); }
    jint DetachCurrentThread()
    { return functions->DetachCurrentThread(this); }
    jint GetEnv(void** env, jint version)
    { return functions->GetEnv(this, env, version); }
    jint AttachCurrentThreadAsDaemon(JNIEnv** p_env, void* thr_args)
    { return functions->AttachCurrentThreadAsDaemon(this, p_env, thr_args); }
};

struct JavaVMAttachArgs {
    jint        version;    /* must be >= JNI_VERSION_1_2 */
    const char* name;       /* NULL or name of thread as modified UTF-8 str */
    jobject     group;      /* global ref of a ThreadGroup object, or NULL */
};
typedef struct JavaVMAttachArgs JavaVMAttachArgs;

/*
 * JNI 1.2+ initialization.  (As of 1.6, the pre-1.2 structures are no
 * longer supported.)
 */
typedef struct JavaVMOption {
    const char* optionString;
    void*       extraInfo;
} JavaVMOption;

typedef struct JavaVMInitArgs {
    jint        version;    /* use JNI_VERSION_1_2 or later */

    jint        nOptions;
    JavaVMOption* options;
    jboolean    ignoreUnrecognized;
} JavaVMInitArgs;

extern "C" {
/*
 * VM initialization functions.
 *
 * Note these are the only symbols exported for JNI by the VM.
 */
jint JNI_GetDefaultJavaVMInitArgs(void*);
jint JNI_CreateJavaVM(JavaVM**, JNIEnv**, void*);
jint JNI_GetCreatedJavaVMs(JavaVM**, jsize, jsize*);

#ifdef _WIN32
#define JNIIMPORT
#define JNIEXPORT	__declspec(dllexport)	
#else
#define JNIIMPORT	__declspec(dllimport)	
#define JNIEXPORT   __attribute__ ((visibility ("default")))
#endif
#define JNICALL

/*
 * Prototypes for functions exported by loadable shared libs.  These are
 * called by JNI, not provided by JNI.
 */
JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved);
JNIEXPORT void JNI_OnUnload(JavaVM* vm, void* reserved);

};

/*
 * Manifest constants.
 */
#define JNI_FALSE   0
#define JNI_TRUE    1

#define JNI_VERSION_1_1 0x00010001
#define JNI_VERSION_1_2 0x00010002
#define JNI_VERSION_1_4 0x00010004
#define JNI_VERSION_1_6 0x00010006

#define JNI_OK          (0)         /* no error */
#define JNI_ERR         (-1)        /* generic error */
#define JNI_EDETACHED   (-2)        /* thread detached from the VM */
#define JNI_EVERSION    (-3)        /* JNI version error */

#define JNI_COMMIT      1           /* copy content, do not free buffer */
#define JNI_ABORT       2           /* free buffer w/o copying back */



struct _JNIEnv : _JNIEnv0 {

    //jint GetVersion()
    //{ return functions->_GetVersion(this); }

    //jclass DefineClass(const char *name, jobject loader, const jbyte* buf,
    //    jsize bufLen)
    //{ return functions->_DefineClass(this, name, loader, buf, bufLen); }

    //jclass FindClass(const char* name)
    //{ return functions->_FindClass(this, name); }

    //jmethodID FromReflectedMethod(jobject method)
    //{ return functions->_FromReflectedMethod(this, method); }

    //jfieldID FromReflectedField(jobject field)
    //{ return functions->_FromReflectedField(this, field); }

    //jobject ToReflectedMethod(jclass cls, jmethodID methodID, jboolean isStatic)
    //{ return functions->_ToReflectedMethod(this, cls, methodID, isStatic); }

    //jclass GetSuperclass(jclass clazz)
    //{ return functions->_GetSuperclass(this, clazz); }

    //jboolean IsAssignableFrom(jclass clazz1, jclass clazz2)
    //{ return functions->_IsAssignableFrom(this, clazz1, clazz2); }

    //jobject ToReflectedField(jclass cls, jfieldID fieldID, jboolean isStatic)
    //{ return functions->_ToReflectedField(this, cls, fieldID, isStatic); }

    //jint Throw(jthrowable obj)
    //{ return functions->_Throw(this, obj); }

    //jint ThrowNew(jclass clazz, const char* message)
    //{ return functions->_ThrowNew(this, clazz, message); }

    //jthrowable ExceptionOccurred()
    //{ return functions->_ExceptionOccurred(this); }

    //void ExceptionDescribe()
    //{ functions->_ExceptionDescribe(this); }

    //void ExceptionClear()
    //{ functions->_ExceptionClear(this); }

    //void FatalError(const char* msg)
    //{ functions->_FatalError(this, msg); }

    jint PushLocalFrame(jint capacity)
	{ return 0; } // functions->_PushLocalFrame(this, capacity); }

    jobject PopLocalFrame(jobject result)
	{ return result; } // functions->_PopLocalFrame(this, result); }

    //jobject NewGlobalRef(jobject obj)
	//{ return functions->_NewGlobalRef(this, obj); }

    //void DeleteGlobalRef(jobject globalRef)
    //{ functions->_DeleteGlobalRef(this, globalRef); }

    void DeleteLocalRef(jobject localRef)
	{ } // functions->_DeleteLocalRef(this, localRef); }

    // jboolean IsSameObject(jobject ref1, jobject ref2)
    // { return functions->_IsSameObject(this, ref1, ref2); }

    jobject NewLocalRef(jobject ref)
	{ return ref; } //functions->_NewLocalRef(this, ref); }

    jobject NewLocalRef(jweak ref)
	{ return functions->_NewLocalRef(this, (jobject)ref); }

    jint EnsureLocalCapacity(jint capacity)
	{ return 0; } // functions->_EnsureLocalCapacity(this, capacity); }

    //jobject AllocObject(jclass clazz)
    //{ return functions->_AllocObject(this, clazz); }

    //jobject NewObject(jclass clazz, jmethodID methodID, ...)
    //{
    //    va_list args;
    //    va_start(args, methodID);
    //    jobject result = functions->_NewObjectV(this, clazz, methodID, args);
    //    va_end(args);
    //    return result;
    //}

    //jobject NewObjectV(jclass clazz, jmethodID methodID, va_list args)
    //{ return functions->_NewObjectV(this, clazz, methodID, args); }

    //jobject NewObjectA(jclass clazz, jmethodID methodID, jvalue* args)
    //{ return functions->_NewObjectA(this, clazz, methodID, args); }

    //jclass GetObjectClass(jobject obj)
    //{ return functions->_GetObjectClass(this, obj); }

    //jboolean IsInstanceOf(jobject obj, jclass clazz)
    //{ return functions->_IsInstanceOf(this, obj, clazz); }

    //jmethodID GetMethodID(jclass clazz, const char* name, const char* sig)
    //{ return functions->_GetMethodID(this, clazz, name, sig); }

#define CallObjectMethod(obj, methodID, ...) \
	getVirtualMethod(_JNIEnv::FNI(), obj, methodID).m.mObject(obj, ## __VA_ARGS__)
#define CallBooleanMethod(obj, methodID, ...) \
	getVirtualMethod(_JNIEnv::FNI(), obj, methodID).m.mBoolean(obj, ## __VA_ARGS__)
#define CallByteMethod(obj, methodID, ...) \
	getVirtualMethod(_JNIEnv::FNI(), obj, methodID).m.mByte(obj, ## __VA_ARGS__)
#define CallCharMethod(obj, methodID, ...) \
	getVirtualMethod(_JNIEnv::FNI(), obj, methodID).m.mChar(obj, ## __VA_ARGS__)
#define CallShortMethod(obj, methodID, ...) \
	getVirtualMethod(_JNIEnv::FNI(), obj, methodID).m.mShort(obj, ## __VA_ARGS__)
#define CallIntMethod(obj, methodID, ...) \
	getVirtualMethod(_JNIEnv::FNI(), obj, methodID).m.mInt(obj, ## __VA_ARGS__)
#define CallLongMethod(obj, methodID, ...) \
	getVirtualMethod(_JNIEnv::FNI(), obj, methodID).m.mLong(obj, ## __VA_ARGS__)
#define CallFloatMethod(obj, methodID, ...) \
	getVirtualMethod(_JNIEnv::FNI(), obj, methodID).m.mFloat(obj, ## __VA_ARGS__)
#define CallDoubleMethod(obj, methodID, ...) \
	getVirtualMethod(_JNIEnv::FNI(), obj, methodID).m.mDouble(obj, ## __VA_ARGS__)
#define CallVoidMethod(obj, methodID, ...) \
	getVirtualMethod(_JNIEnv::FNI(), obj, methodID).m.mVoid(obj, ## __VA_ARGS__)

    //void CallVoidMethod(jobject obj, jmethodID methodID, ...)
    //{
    //    va_list args;
    //    va_start(args, methodID);
    //    functions->_CallVoidMethodV(this, obj, methodID, args);
    //    va_end(args);
    //}
    //void CallVoidMethodV(jobject obj, jmethodID methodID, va_list args)
    //{ functions->_CallVoidMethodV(this, obj, methodID, args); }
    //void CallVoidMethodA(jobject obj, jmethodID methodID, jvalue* args)
    //{ functions->_CallVoidMethodA(this, obj, methodID, args); }


#define CallNonvirtualObjectMethod(obj, cls, methodID, ...) \
	getDirectMethod(_JNIEnv::FNI(), obj, cls, methodID).m.mObject(obj, ## __VA_ARGS__);
#define CallNonvirtualBooleanMethod(obj, cls, methodID, ...) \
	getDirectMethod(_JNIEnv::FNI(), obj, cls, methodID).m.mBoolean(obj, ## __VA_ARGS__);
#define CallNonvirtualByteMethod(obj, cls, methodID, ...) \
	getDirectMethod(_JNIEnv::FNI(), obj, cls, methodID).m.mByte(obj, ## __VA_ARGS__);
#define CallNonvirtualCharMethod(obj, cls, methodID, ...) \
	getDirectMethod(_JNIEnv::FNI(), obj, cls, methodID).m.mChar(obj, ## __VA_ARGS__);
#define CallNonvirtualShortMethod(obj, cls, methodID, ...) \
	getDirectMethod(_JNIEnv::FNI(), obj, cls, methodID).m.mShort(obj, ## __VA_ARGS__);
#define CallNonvirtualIntMethod(obj, cls, methodID, ...) \
	getDirectMethod(_JNIEnv::FNI(), obj, cls, methodID).m.mInt(obj, ## __VA_ARGS__);
#define CallNonvirtualLongMethod(obj, cls, methodID, ...) \
	getDirectMethod(_JNIEnv::FNI(), obj, cls, methodID).m.mLong(obj, ## __VA_ARGS__);
#define CallNonvirtualFloatMethod(obj, cls, methodID, ...) \
	getDirectMethod(_JNIEnv::FNI(), obj, cls, methodID).m.mFloat(obj, ## __VA_ARGS__);
#define CallNonvirtualDoubleMethod(obj, cls, methodID, ...) \
	getDirectMethod(_JNIEnv::FNI(), obj, cls, methodID).m.mDouble(obj, ## __VA_ARGS__);
#define CallNonvirtualVoidMethod(obj, cls, methodID, ...) \
	getDirectMethod(_JNIEnv::FNI(), obj, cls, methodID).m.mVoid(obj, ## __VA_ARGS__);

	//void CallNonvirtualVoidMethod(jobject obj, jclass clazz,
    //    jmethodID methodID, ...)
    //{
    //    va_list args;
    //    va_start(args, methodID);
    //    functions->_CallNonvirtualVoidMethodV(this, obj, clazz, methodID, args);
    //    va_end(args);
    //}
    //void CallNonvirtualVoidMethodV(jobject obj, jclass clazz,
    //    jmethodID methodID, va_list args)
    //{ functions->_CallNonvirtualVoidMethodV(this, obj, clazz, methodID, args); }
    //void CallNonvirtualVoidMethodA(jobject obj, jclass clazz,
    //    jmethodID methodID, jvalue* args)
    //{ functions->_CallNonvirtualVoidMethodA(this, obj, clazz, methodID, args); }

    //jfieldID GetFieldID(jclass clazz, const char* name, const char* sig)
    //{ return functions->_GetFieldID(this, clazz, name, sig); }

    jobject GetObjectField(jobject obj, jfieldID fieldID)
	{ return checkField(obj, fieldID) ? *(jobject*)FASTIVA_OBJECT_FIELD(obj, fieldID) : functions->_GetObjectField(this, obj, fieldID); }
    jboolean GetBooleanField(jobject obj, jfieldID fieldID)
    { return checkField(obj, fieldID) ? *(jboolean*)FASTIVA_OBJECT_FIELD(obj, fieldID) : functions->_GetBooleanField(this, obj, fieldID); }
    jbyte GetByteField(jobject obj, jfieldID fieldID)
    { return checkField(obj, fieldID) ? *(jbyte*)FASTIVA_OBJECT_FIELD(obj, fieldID) : functions->_GetByteField(this, obj, fieldID); }
    jchar GetCharField(jobject obj, jfieldID fieldID)
    { return checkField(obj, fieldID) ? *(jchar*)FASTIVA_OBJECT_FIELD(obj, fieldID) : functions->_GetCharField(this, obj, fieldID); }
    jshort GetShortField(jobject obj, jfieldID fieldID)
    { return checkField(obj, fieldID) ? *(jshort*)FASTIVA_OBJECT_FIELD(obj, fieldID) : functions->_GetShortField(this, obj, fieldID); }
    jint GetIntField(jobject obj, jfieldID fieldID)
    { return checkField(obj, fieldID) ? *(jint*)FASTIVA_OBJECT_FIELD(obj, fieldID) : functions->_GetIntField(this, obj, fieldID); }
    jlong GetLongField(jobject obj, jfieldID fieldID)
    { return checkField(obj, fieldID) ? *(jlong*)FASTIVA_OBJECT_FIELD(obj, fieldID) : functions->_GetLongField(this, obj, fieldID); }
    jfloat GetFloatField(jobject obj, jfieldID fieldID)
    { return checkField(obj, fieldID) ? *(jfloat*)FASTIVA_OBJECT_FIELD(obj, fieldID) : functions->_GetFloatField(this, obj, fieldID); }
    jdouble GetDoubleField(jobject obj, jfieldID fieldID)
    { return checkField(obj, fieldID) ? *(jdouble*)FASTIVA_OBJECT_FIELD(obj, fieldID) : functions->_GetDoubleField(this, obj, fieldID); }

    //void SetObjectField(jobject obj, jfieldID fieldID, jobject value)
    //{ functions->_SetObjectField(this, obj, fieldID, value); }
    void SetBooleanField(jobject obj, jfieldID fieldID, jboolean value)
    { if (checkField(obj, fieldID)) *(jboolean*)FASTIVA_OBJECT_FIELD(obj, fieldID) = value; else functions->_SetBooleanField(this, obj, fieldID, value); }
    void SetByteField(jobject obj, jfieldID fieldID, jbyte value)
    { if (checkField(obj, fieldID)) *(jbyte*)FASTIVA_OBJECT_FIELD(obj, fieldID) = value; else functions->_SetByteField(this, obj, fieldID, value); }
    void SetCharField(jobject obj, jfieldID fieldID, jchar value)
    { if (checkField(obj, fieldID)) *(jchar*)FASTIVA_OBJECT_FIELD(obj, fieldID) = value; else functions->_SetCharField(this, obj, fieldID, value); }
    void SetShortField(jobject obj, jfieldID fieldID, jshort value)
    { if (checkField(obj, fieldID)) *(jshort*)FASTIVA_OBJECT_FIELD(obj, fieldID) = value; else functions->_SetShortField(this, obj, fieldID, value); }
    void SetIntField(jobject obj, jfieldID fieldID, jint value)
    { if (checkField(obj, fieldID)) *(jint*)FASTIVA_OBJECT_FIELD(obj, fieldID) = value; else functions->_SetIntField(this, obj, fieldID, value); }
    void SetLongField(jobject obj, jfieldID fieldID, jlong value)
    { if (checkField(obj, fieldID)) *(jlong*)FASTIVA_OBJECT_FIELD(obj, fieldID) = value; else functions->_SetLongField(this, obj, fieldID, value); }
    void SetFloatField(jobject obj, jfieldID fieldID, jfloat value)
    { if (checkField(obj, fieldID)) *(jfloat*)FASTIVA_OBJECT_FIELD(obj, fieldID) = value; else functions->_SetFloatField(this, obj, fieldID, value); }
    void SetDoubleField(jobject obj, jfieldID fieldID, jdouble value)
    { if (checkField(obj, fieldID)) *(jdouble*)FASTIVA_OBJECT_FIELD(obj, fieldID) = value; else functions->_SetDoubleField(this, obj, fieldID, value); }

    //jmethodID GetStaticMethodID(jclass clazz, const char* name, const char* sig)
    //{ return functions->_GetStaticMethodID(this, clazz, name, sig); }


#define CallStaticObjectMethod(cls, methodID, ...) \
	getStaticMethod(_JNIEnv::FNI(), cls, methodID).m.mObject(__VA_ARGS__);
#define CallStaticBooleanMethod(cls, methodID, ...) \
	getStaticMethod(_JNIEnv::FNI(), cls, methodID).m.mBoolean(__VA_ARGS__);
#define CallStaticByteMethod(cls, methodID, ...) \
	getStaticMethod(_JNIEnv::FNI(), cls, methodID).m.mByte(__VA_ARGS__);
#define CallStaticCharMethod(cls, methodID, ...) \
	getStaticMethod(_JNIEnv::FNI(), cls, methodID).m.mChar(__VA_ARGS__);
#define CallStaticShortMethod(cls, methodID, ...) \
	getStaticMethod(_JNIEnv::FNI(), cls, methodID).m.mShort(__VA_ARGS__);
#define CallStaticIntMethod(cls, methodID, ...) \
	getStaticMethod(_JNIEnv::FNI(), cls, methodID).m.mInt(__VA_ARGS__);
#define CallStaticLongMethod(cls, methodID, ...) \
	getStaticMethod(_JNIEnv::FNI(), cls, methodID).m.mLong(__VA_ARGS__);
#define CallStaticFloatMethod(cls, methodID, ...) \
	getStaticMethod(_JNIEnv::FNI(), cls, methodID).m.mFloat(__VA_ARGS__);
#define CallStaticDoubleMethod(cls, methodID, ...) \
	getStaticMethod(_JNIEnv::FNI(), cls, methodID).m.mDouble(__VA_ARGS__);
#define CallStaticVoidMethod(cls, methodID, ...) \
	getStaticMethod(_JNIEnv::FNI(), cls, methodID).m.mVoid(__VA_ARGS__);

    //void CallStaticVoidMethod(jclass clazz, jmethodID methodID, ...)
    //{
    //    va_list args;
    //    va_start(args, methodID);
    //    functions->_CallStaticVoidMethodV(this, clazz, methodID, args);
    //    va_end(args);
    //}
    //void CallStaticVoidMethodV(jclass clazz, jmethodID methodID, va_list args)
    //{ functions->_CallStaticVoidMethodV(this, clazz, methodID, args); }
    //void CallStaticVoidMethodA(jclass clazz, jmethodID methodID, jvalue* args)
    //{ functions->_CallStaticVoidMethodA(this, clazz, methodID, args); }

    //jfieldID GetStaticFieldID(jclass clazz, const char* name, const char* sig)
    //{ return functions->_GetStaticFieldID(this, clazz, name, sig); }

    //jobject GetStaticObjectField(jclass clazz, jfieldID fieldID)
    //{ return checkField(clazz, fieldID) ? *(jobject*)FASTIVA_STATIC_FIELD(fieldID) : functions->_GetStaticObjectField(this, clazz, fieldID); }
    jboolean GetStaticBooleanField(jclass clazz, jfieldID fieldID)
    { return checkField(clazz, fieldID) ? *(jboolean*)FASTIVA_STATIC_FIELD(fieldID) : functions->_GetStaticBooleanField(this, clazz, fieldID); }
    jbyte GetStaticByteField(jclass clazz, jfieldID fieldID)
    { return checkField(clazz, fieldID) ? *(jbyte*)FASTIVA_STATIC_FIELD(fieldID) : functions->_GetStaticByteField(this, clazz, fieldID); }
    jchar GetStaticCharField(jclass clazz, jfieldID fieldID)
    { return checkField(clazz, fieldID) ? *(jchar*)FASTIVA_STATIC_FIELD(fieldID) : functions->_GetStaticCharField(this, clazz, fieldID); }
    jshort GetStaticShortField(jclass clazz, jfieldID fieldID)
    { return checkField(clazz, fieldID) ? *(jshort*)FASTIVA_STATIC_FIELD(fieldID) : functions->_GetStaticShortField(this, clazz, fieldID); }
    jint GetStaticIntField(jclass clazz, jfieldID fieldID)
    { return checkField(clazz, fieldID) ? *(jint*)FASTIVA_STATIC_FIELD(fieldID) : functions->_GetStaticIntField(this, clazz, fieldID); }
    jlong GetStaticLongField(jclass clazz, jfieldID fieldID)
    { return checkField(clazz, fieldID) ? *(jlong*)FASTIVA_STATIC_FIELD(fieldID) : functions->_GetStaticLongField(this, clazz, fieldID); }
    jfloat GetStaticFloatField(jclass clazz, jfieldID fieldID)
    { return checkField(clazz, fieldID) ? *(jfloat*)FASTIVA_STATIC_FIELD(fieldID) : functions->_GetStaticFloatField(this, clazz, fieldID); }
    jdouble GetStaticDoubleField(jclass clazz, jfieldID fieldID)
    { return checkField(clazz, fieldID) ? *(jdouble*)FASTIVA_STATIC_FIELD(fieldID) : functions->_GetStaticDoubleField(this, clazz, fieldID); }

    //void SetStaticObjectField(jclass clazz, jfieldID fieldID, jobject value)
    //{ *(jobject*)FASTIVA_STATIC_FIELD(fieldID); } // functions->_SetStaticObjectField(this, clazz, fieldID, value); }
    void SetStaticBooleanField(jclass clazz, jfieldID fieldID, jboolean value)
    { if (checkField(clazz, fieldID)) *(jboolean*)FASTIVA_STATIC_FIELD(fieldID) = value; else functions->_SetStaticBooleanField(this, clazz, fieldID, value); }
    void SetStaticByteField(jclass clazz, jfieldID fieldID, jbyte value)
    { if (checkField(clazz, fieldID)) *(jbyte*)FASTIVA_STATIC_FIELD(fieldID) = value; else functions->_SetStaticByteField(this, clazz, fieldID, value); }
    void SetStaticCharField(jclass clazz, jfieldID fieldID, jchar value)
    { if (checkField(clazz, fieldID)) *(jchar*)FASTIVA_STATIC_FIELD(fieldID) = value; else functions->_SetStaticCharField(this, clazz, fieldID, value); }
    void SetStaticShortField(jclass clazz, jfieldID fieldID, jshort value)
    { if (checkField(clazz, fieldID)) *(jshort*)FASTIVA_STATIC_FIELD(fieldID) = value; else functions->_SetStaticShortField(this, clazz, fieldID, value); }
    void SetStaticIntField(jclass clazz, jfieldID fieldID, jint value)
    { if (checkField(clazz, fieldID)) *(jint*)FASTIVA_STATIC_FIELD(fieldID) = value; else functions->_SetStaticIntField(this, clazz, fieldID, value); }
    void SetStaticLongField(jclass clazz, jfieldID fieldID, jlong value)
    { if (checkField(clazz, fieldID)) *(jlong*)FASTIVA_STATIC_FIELD(fieldID) = value; else functions->_SetStaticLongField(this, clazz, fieldID, value); }
    void SetStaticFloatField(jclass clazz, jfieldID fieldID, jfloat value)
    { if (checkField(clazz, fieldID)) *(jfloat*)FASTIVA_STATIC_FIELD(fieldID) = value; else functions->_SetStaticFloatField(this, clazz, fieldID, value); }
    void SetStaticDoubleField(jclass clazz, jfieldID fieldID, jdouble value)
    { if (checkField(clazz, fieldID)) *(jdouble*)FASTIVA_STATIC_FIELD(fieldID) = value; else functions->_SetStaticDoubleField(this, clazz, fieldID, value); }

    //jstring NewString(const jchar* unicodeChars, jsize len)
    //{ return functions->_NewString(this, unicodeChars, len); }

    jsize GetStringLength(jstring string)
	{ return checkObject(string) ? string->count : functions->_GetStringLength(this, string); }

    const jchar* GetStringChars(jstring string, jboolean* isCopy)
	{ return checkObject(string, isCopy) ? (jchar*)(void*)string->value->items : functions->_GetStringChars(this, string, isCopy); }

    void ReleaseStringChars(jstring string, const jchar* chars)
	{ functions->_ReleaseArray(string); }

    //jstring NewStringUTF(const char* bytes)
    //{ return functions->_NewStringUTF(this, bytes); }

    //jsize GetStringUTFLength(jstring string)
    //{ return functions->_GetStringUTFLength(this, string); }

    //const char* GetStringUTFChars(jstring string, jboolean* isCopy)
    //{ return functions->_GetStringUTFChars(this, string, isCopy); }

    //void ReleaseStringUTFChars(jstring string, const char* utf)
    //{ functions->_ReleaseStringUTFChars(this, string, utf); }

    jsize GetArrayLength(jarray array)
	{ return checkObject(array) ? array->length : functions->_GetArrayLength(this, array); }

    //jobjectArray NewObjectArray(jsize length, jclass elementClass,
    //    jobject initialElement)
    //{ return functions->_NewObjectArray(this, length, elementClass,
    //    initialElement); }

    jobject GetObjectArrayElement(jobjectArray array, jsize index)
	{ return checkBound(array, index) ? ((jobject*)(void*)array->items)[index] : functions->_GetObjectArrayElement(this, array, index); }

    //void SetObjectArrayElement(jobjectArray array, jsize index, jobject value)
    //{ functions->_SetObjectArrayElement(this, array, index, value); }

    //jbooleanArray NewBooleanArray(jsize length)
    //{ return functions->_NewBooleanArray(this, length); }
    //jbyteArray NewByteArray(jsize length)
    //{ return functions->_NewByteArray(this, length); }
    //jcharArray NewCharArray(jsize length)
    //{ return functions->_NewCharArray(this, length); }
    //jshortArray NewShortArray(jsize length)
    //{ return functions->_NewShortArray(this, length); }
    //jintArray NewIntArray(jsize length)
    //{ return functions->_NewIntArray(this, length); }
    //jlongArray NewLongArray(jsize length)
    //{ return functions->_NewLongArray(this, length); }
    //jfloatArray NewFloatArray(jsize length)
    //{ return functions->_NewFloatArray(this, length); }
    //jdoubleArray NewDoubleArray(jsize length)
    //{ return functions->_NewDoubleArray(this, length); }

    jboolean* GetBooleanArrayElements(jbooleanArray array, jboolean* isCopy)
    { return checkBound(array, isCopy) ? ((jboolean*)(void*)array->items) : functions->_GetBooleanArrayElements(this, array, isCopy); }
    jbyte* GetByteArrayElements(jbyteArray array, jboolean* isCopy)
    { return checkBound(array, isCopy) ? ((jbyte*)(void*)array->items) : functions->_GetByteArrayElements(this, array, isCopy); }
    jchar* GetCharArrayElements(jcharArray array, jboolean* isCopy)
    { return checkBound(array, isCopy) ? ((jchar*)(void*)array->items) : functions->_GetCharArrayElements(this, array, isCopy); }
    jshort* GetShortArrayElements(jshortArray array, jboolean* isCopy)
    { return checkBound(array, isCopy) ? ((jshort*)(void*)array->items) : functions->_GetShortArrayElements(this, array, isCopy); }
    jint* GetIntArrayElements(jintArray array, jboolean* isCopy)
    { return checkBound(array, isCopy) ? ((jint*)(void*)array->items) : functions->_GetIntArrayElements(this, array, isCopy); }
    jlong* GetLongArrayElements(jlongArray array, jboolean* isCopy)
    { return checkBound(array, isCopy) ? ((jlong*)(void*)array->items) : functions->_GetLongArrayElements(this, array, isCopy); }
    jfloat* GetFloatArrayElements(jfloatArray array, jboolean* isCopy)
    { return checkBound(array, isCopy) ? ((jfloat*)(void*)array->items) : functions->_GetFloatArrayElements(this, array, isCopy); }
    jdouble* GetDoubleArrayElements(jdoubleArray array, jboolean* isCopy)
    { return checkBound(array, isCopy) ? ((jdouble*)(void*)array->items) : functions->_GetDoubleArrayElements(this, array, isCopy); }

	void ReleaseBooleanArrayElements(jbooleanArray array, jboolean* elems,
        jint mode)
	{ functions->_ReleaseArray(array); } // functions->_ReleaseBooleanArrayElements(this, array, elems, mode); }
    void ReleaseByteArrayElements(jbyteArray array, jbyte* elems,
        jint mode)
    { functions->_ReleaseArray(array); } // functions->_ReleaseByteArrayElements(this, array, elems, mode); }
    void ReleaseCharArrayElements(jcharArray array, jchar* elems,
        jint mode)
    { functions->_ReleaseArray(array); } //  functions->_ReleaseCharArrayElements(this, array, elems, mode); }
    void ReleaseShortArrayElements(jshortArray array, jshort* elems,
        jint mode)
    { functions->_ReleaseArray(array); } //  functions->_ReleaseShortArrayElements(this, array, elems, mode); }
    void ReleaseIntArrayElements(jintArray array, jint* elems,
        jint mode)
    { functions->_ReleaseArray(array); } //  functions->_ReleaseIntArrayElements(this, array, elems, mode); }
    void ReleaseLongArrayElements(jlongArray array, jlong* elems,
        jint mode)
    { functions->_ReleaseArray(array); } //  functions->_ReleaseLongArrayElements(this, array, elems, mode); }
    void ReleaseFloatArrayElements(jfloatArray array, jfloat* elems,
        jint mode)
    { functions->_ReleaseArray(array); } //  functions->_ReleaseFloatArrayElements(this, array, elems, mode); }
    void ReleaseDoubleArrayElements(jdoubleArray array, jdouble* elems,
        jint mode)
    { functions->_ReleaseArray(array); } //  functions->_ReleaseDoubleArrayElements(this, array, elems, mode); }

    void GetBooleanArrayRegion(jbooleanArray array, jsize start, jsize len,
        jboolean* buf)
    { if (checkBound(array, start, len)) memcpy(buf, ((jboolean*)(void*)array->items)+start, len*sizeof(jboolean)); else functions->_GetBooleanArrayRegion(this, array, start, len, buf); }
    void GetByteArrayRegion(jbyteArray array, jsize start, jsize len,
        jbyte* buf)
    { if (checkBound(array, start, len)) memcpy(buf, ((jbyte*)(void*)array->items)+start, len*sizeof(jbyte)); else functions->_GetByteArrayRegion(this, array, start, len, buf); }
    void GetCharArrayRegion(jcharArray array, jsize start, jsize len,
        jchar* buf)
    { if (checkBound(array, start, len)) memcpy(buf, ((jchar*)(void*)array->items)+start, len*sizeof(jchar)); else functions->_GetCharArrayRegion(this, array, start, len, buf); }
    void GetShortArrayRegion(jshortArray array, jsize start, jsize len,
        jshort* buf)
    { if (checkBound(array, start, len)) memcpy(buf, ((jshort*)(void*)array->items)+start, len*sizeof(jshort)); else functions->_GetShortArrayRegion(this, array, start, len, buf); }
    void GetIntArrayRegion(jintArray array, jsize start, jsize len,
        jint* buf)
    { if (checkBound(array, start, len)) memcpy(buf, ((jint*)(void*)array->items)+start, len*sizeof(jint)); else functions->_GetIntArrayRegion(this, array, start, len, buf); }
    void GetLongArrayRegion(jlongArray array, jsize start, jsize len,
        jlong* buf)
    { if (checkBound(array, start, len)) memcpy(buf, ((jlong*)(void*)array->items)+start, len*sizeof(jlong)); else functions->_GetLongArrayRegion(this, array, start, len, buf); }
    void GetFloatArrayRegion(jfloatArray array, jsize start, jsize len,
        jfloat* buf)
    { if (checkBound(array, start, len)) memcpy(buf, ((jfloat*)(void*)array->items)+start, len*sizeof(jfloat)); else functions->_GetFloatArrayRegion(this, array, start, len, buf); }
    void GetDoubleArrayRegion(jdoubleArray array, jsize start, jsize len,
        jdouble* buf)
    { if (checkBound(array, start, len)) memcpy(buf, ((jdouble*)(void*)array->items)+start, len*sizeof(jdouble)); else functions->_GetDoubleArrayRegion(this, array, start, len, buf); }

    void SetBooleanArrayRegion(jbooleanArray array, jsize start, jsize len,
        const jboolean* buf)
    { if (checkBound(array, start, len)) memcpy(((jboolean*)(void*)array->items)+start, buf, len*sizeof(jboolean)); else functions->_SetBooleanArrayRegion(this, array, start, len, buf); }
    void SetByteArrayRegion(jbyteArray array, jsize start, jsize len,
        const jbyte* buf)
    { if (checkBound(array, start, len)) memcpy(((jbyte*)(void*)array->items)+start, buf, len*sizeof(jbyte)); else functions->_SetByteArrayRegion(this, array, start, len, buf); }
    void SetCharArrayRegion(jcharArray array, jsize start, jsize len,
        const jchar* buf)
    { if (checkBound(array, start, len)) memcpy(((jchar*)(void*)array->items)+start, buf, len*sizeof(jchar)); else functions->_SetCharArrayRegion(this, array, start, len, buf); }
    void SetShortArrayRegion(jshortArray array, jsize start, jsize len,
        const jshort* buf)
    { if (checkBound(array, start, len)) memcpy(((jshort*)(void*)array->items)+start, buf, len*sizeof(jshort)); else functions->_SetShortArrayRegion(this, array, start, len, buf); }
    void SetIntArrayRegion(jintArray array, jsize start, jsize len,
        const jint* buf)
    { if (checkBound(array, start, len)) memcpy(((jint*)(void*)array->items)+start, buf, len*sizeof(jint)); else functions->_SetIntArrayRegion(this, array, start, len, buf); }
    void SetLongArrayRegion(jlongArray array, jsize start, jsize len,
        const jlong* buf)
    { if (checkBound(array, start, len)) memcpy(((jlong*)(void*)array->items)+start, buf, len*sizeof(jlong)); else functions->_SetLongArrayRegion(this, array, start, len, buf); }
    void SetFloatArrayRegion(jfloatArray array, jsize start, jsize len,
        const jfloat* buf)
    { if (checkBound(array, start, len)) memcpy(((jfloat*)(void*)array->items)+start, buf, len*sizeof(jfloat)); else functions->_SetFloatArrayRegion(this, array, start, len, buf); }
    void SetDoubleArrayRegion(jdoubleArray array, jsize start, jsize len,
        const jdouble* buf)
    { if (checkBound(array, start, len)) memcpy(((jdouble*)(void*)array->items)+start, buf, len*sizeof(jdouble)); else functions->_SetDoubleArrayRegion(this, array, start, len, buf); }

    jint RegisterNatives(jclass clazz, const JNINativeMethod* methods,
        jint nMethods)
    { return functions->_RegisterFastNatives(this, clazz, methods, nMethods); }

    //jint UnregisterNatives(jclass clazz)
    //{ return functions->_UnregisterNatives(this, clazz); }

    //jint MonitorEnter(jobject obj)
    //{ return functions->_MonitorEnter(this, obj); }

    //jint MonitorExit(jobject obj)
    //{ return functions->_MonitorExit(this, obj); }

    //jint GetJavaVM(JavaVM** vm)
    //{ return functions->_GetJavaVM(this, vm); }

    void GetStringRegion(jstring str, jsize start, jsize len, jchar* buf)
    { if (checkBound(str->value, start+=str->offset, len)) memcpy(((jchar*)(void*)str->value->items)+start, buf, len*sizeof(jchar)); else functions->_GetStringRegion(this, str, start, len, buf); }

    //void GetStringUTFRegion(jstring str, jsize start, jsize len, char* buf)
    //{ return functions->_GetStringUTFRegion(this, str, start, len, buf); }

    void* GetPrimitiveArrayCritical(jarray array, jboolean* isCopy)
	{ return checkBound(array, isCopy) ? array->items : functions->_GetPrimitiveArrayCritical(this, array, isCopy); }

    void ReleasePrimitiveArrayCritical(jarray array, void* carray, jint mode)
	{ functions->_ReleaseArray(array); } // functions->_ReleasePrimitiveArrayCritical(this, array, carray, mode); }

    const jchar* GetStringCritical(jstring string, jboolean* isCopy)
	{ return checkObject(string, isCopy) ? (jchar*)(void*)string->value->items + string->offset : functions->_GetStringCritical(this, string, isCopy); }

    void ReleaseStringCritical(jstring string, const jchar* carray)
	{ functions->_ReleaseArray(string); } //  functions->_ReleaseStringCritical(this, string, carray); }

    //jweak NewWeakGlobalRef(jobject obj)
    //{ return functions->_NewWeakGlobalRef(this, obj); }

    //void DeleteWeakGlobalRef(jweak obj)
    //{ functions->_DeleteWeakGlobalRef(this, obj); }

    //jboolean ExceptionCheck()
    //{ return functions->_ExceptionCheck(this); }

    //jobject NewDirectByteBuffer(void* address, jlong capacity)
    //{ return functions->_NewDirectByteBuffer(this, address, capacity); }

    //void* GetDirectBufferAddress(jobject buf)
    //{ return functions->_GetDirectBufferAddress(this, buf); }

    //jlong GetDirectBufferCapacity(jobject buf)
    //{ return functions->_GetDirectBufferCapacity(this, buf); }

private:
    /* Hide unsupported JNI 1.6 functions */
    jobjectRefType GetObjectRefType(jobject obj)
    { return functions->_GetObjectRefType(this, obj); }

private:
	bool checkObject(jobject obj) {
		return (obj != NULL);
	}

	bool checkField(jobject obj, jfieldID fieldID) {
		return obj != NULL && !FASTIVA_IS_VOLATILE_FIELD(fieldID);
	}

	bool checkObject(jobject obj, jboolean* isCopy) {
		if (obj == NULL) {
			return false;
		}
		if (isCopy!=NULL) {
			*isCopy = false;
		}
		return true;
	}

	bool checkBound(jarray array, jboolean* isCopy) {
		if (array == NULL) {
			return false;
		}
		if (isCopy!=NULL) {
			*isCopy = false;
		}
		return true;
	}

	bool checkBound(jarray array, int offset) {
		return (array != NULL && array->length >= (unsigned int)offset);
	}

	bool checkBound(jarray array, int offset, jboolean* isCopy) {
		if (array == NULL) {
			return false;
		}
		if (array->length < (unsigned int)offset) {
			return false;
		}
		if (isCopy!=NULL) {
			*isCopy = false;
		}
		return true;
	}

	bool checkBound(jarray array, int offset, int len) {
		if (array == NULL) {
			return false;
		}
		if (offset < 0 || len < 0) {
			return false;
		}
		if (array->length < (unsigned int)(offset + len)) {
			return false;
		}
		return true;
	}

public:
	struct FNI {
		int padding[2];
		jmp_buf buf;
		FNI_METHOD m;
	};

	FNI& getDirectMethod(FNI& fni, jobject obj, jclass cls, jmethodID m) {
		this->exContext = &fni;
		this->callingMethod = m;
		this->callingClass = cls;
		fni.m = functions->_InvokeDirect;
		return fni;
	}

	FNI& getStaticMethod(FNI& fni, jclass cls, jmethodID m) {
		this->callingMethod = m;
		this->exContext = &fni;
		fni.m = functions->_InvokeStatic;
		return fni;
	}

	FNI& getVirtualMethod(FNI& fni, jobject obj, jmethodID m) {
		this->exContext = &fni;
		this->callingMethod = m;
		fni.m = functions->_InvokeVirtual;
		return fni;
	}
private:
	jmethodID	callingMethod;
	jclass		callingClass;
	FNI*		exContext;
};

inline bool checkFastivaMethod(jobject obj, jmethodID id) {
	return obj != NULL && ((int)id & 1) != 0;
}

#endif  /* __FASTIVA_JNI_H_ */
